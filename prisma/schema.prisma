generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  schemas           = ["public"]
}

// -------------------------------
// Profiles Table (1:1 with User id from Supabase Auth)
// -------------------------------
model Profile {
  id                     String   @id @default(uuid()) @db.Uuid
  user_id                String   @unique @db.Uuid
  full_name              String
  bio                    String?
  avatar_url             String?
  is_onboarding_complete Boolean  @default(false)
  created_at             DateTime @default(now()) @db.Timestamptz(3)
  updated_at             DateTime @updatedAt @db.Timestamptz(3)

  // relations
  address     Address?                 @relation(name: "ProfileAddress")
  memberships NeighborhoodMembership[]
  posts       Post[]
  likes       PostLike[]
  comments    PostComment[]
  media       Media[] // media uploaded by this profile

  marketplace_listings MarketplaceListing[]

  conversations ConversationParticipant[]
  sent_messages Message[]

  @@map("profiles")
  @@schema("public")
}

// -------------------------------
// Addresses Table
// -------------------------------
model Address {
  id              BigInt                                @id @default(autoincrement())
  user_id         String                                @unique @db.Uuid
  neighborhood_id BigInt?
  address_line_1  String
  city            String
  postal_code     String
  // PostGIS geography column
  location        Unsupported("geography(Point, 4326)")

  // Relation to Profile: uses Profile.user_id (not Profile.id)
  user         Profile       @relation(name: "ProfileAddress", fields: [user_id], references: [user_id], onDelete: Cascade)
  neighborhood Neighborhood? @relation(fields: [neighborhood_id], references: [id], onDelete: SetNull)

  @@index([location], map: "idx_addresses_location", type: Gist) // Geospatial index
  @@map("addresses")
  @@schema("public")
}

// -------------------------------
// Neighborhoods
// -------------------------------
model Neighborhood {
  id           BigInt                                  @id @default(autoincrement())
  name         String
  description  String?
  // Geometry columns
  boundaries   Unsupported("geography(Polygon, 4326)")
  center_point Unsupported("geography(Point, 4326)")
  created_at   DateTime                                @default(now())

  memberships          NeighborhoodMembership[]
  posts                Post[]
  addresses            Address[]
  marketplace_listings MarketplaceListing[]

  @@index([boundaries], map: "idx_neighborhoods_boundaries", type: Gist)
  @@map("neighborhoods")
  @@schema("public")
}

// -------------------------------
// Neighborhood Memberships
// -------------------------------
model NeighborhoodMembership {
  user_id         String   @db.Uuid
  neighborhood_id BigInt
  role            String   @default("member")
  joined_at       DateTime @default(now())

  // references Profile.user_id (Profile.user_id is unique)
  user         Profile      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  neighborhood Neighborhood @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)

  @@id([user_id, neighborhood_id])
  @@map("neighborhood_memberships")
  @@schema("public")
}

// -------------------------------
// Posts
// -------------------------------
model Post {
  id              BigInt   @id @default(autoincrement())
  author_id       String   @db.Uuid
  neighborhood_id BigInt
  content         String   @db.Text
  is_pinned       Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamptz(3)

  // author references Profile.user_id
  author       Profile       @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  neighborhood Neighborhood  @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)
  likes        PostLike[]
  comments     PostComment[]

  @@index([neighborhood_id, created_at(sort: Desc)])
  @@map("posts")
  @@schema("public")
}

// -------------------------------
// Post Likes
// -------------------------------
model PostLike {
  user_id    String   @db.Uuid
  post_id    BigInt
  created_at DateTime @default(now())

  user Profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  post Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([user_id, post_id])
  @@map("post_likes")
  @@schema("public")
}

// -------------------------------
// Post Comments
// -------------------------------
model PostComment {
  id                BigInt  @id @default(autoincrement())
  post_id           BigInt
  author_id         String  @db.Uuid
  content           String  @db.Text
  parent_comment_id BigInt?

  post           Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  author         Profile       @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  parent_comment PostComment?  @relation("Replies", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  replies        PostComment[] @relation("Replies")
  created_at     DateTime      @default(now())

  @@map("post_comments")
  @@schema("public")
}

// -------------------------------
// Media Table
// -------------------------------
model Media {
  id            String   @id @default(uuid())
  uploader_id   String   @db.Uuid
  resource_type String // e.g., 'post', 'profile_avatar'
  resource_id   BigInt // The ID of the post or other resource
  url           String   @db.Text
  created_at    DateTime @default(now())

  // uploader references Profile.user_id
  uploader Profile @relation(fields: [uploader_id], references: [user_id], onDelete: Cascade)

  @@index([resource_type, resource_id])
  @@map("media")
  @@schema("public")
}

// -------------------------------
// MarketplaceListing
// -------------------------------
model MarketplaceListing {
  id              BigInt                                @id @default(autoincrement())
  seller_id       String                                @db.Uuid
  neighborhood_id BigInt
  title           String
  description     String?                               @db.Text
  price           Float
  category        String
  status          String                                @default("available") // 'available', 'sold', 'pending'
  location        Unsupported("geography(Point, 4326)")
  created_at      DateTime                              @default(now())

  // seller references Profile.user_id
  seller       Profile      @relation(fields: [seller_id], references: [user_id], onDelete: Cascade)
  neighborhood Neighborhood @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)

  @@index([location], map: "idx_marketplace_listings_location", type: Gist)
  @@map("marketplace_listings")
  @@schema("public")
}

model Conversation {
  id           BigInt      @id @default(autoincrement())
  created_at   DateTime    @default(now())

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
  @@schema("public")
}

model ConversationParticipant {
  conversation_id BigInt
  user_id         String   @db.Uuid
  last_read_at    DateTime? // To track unread messages

  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user         Profile      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([conversation_id, user_id])
  @@index([user_id])
  @@map("conversation_participants")
  @@schema("public")
}

model Message {
  id              BigInt       @id @default(autoincrement())
  conversation_id BigInt
  sender_id       String       @db.Uuid
  content         String       @db.Text
  sent_at         DateTime     @default(now())

  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender       Profile      @relation(fields: [sender_id], references: [id], onDelete: Cascade)

  @@map("messages")
  @@schema("public")
}
