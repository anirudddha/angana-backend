generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"] // ONLY public — do not include auth
}

// -------------------------------
// Profiles Table (1:1 with User id from Supabase Auth)
// -------------------------------
model Profile {
  id                     String   @id @default(uuid()) @db.Uuid
  user_id                String   @unique @db.Uuid
  full_name              String
  bio                    String?
  avatar_url             String?
  is_onboarding_complete Boolean  @default(false)
  created_at             DateTime @default(now()) @db.Timestamptz(3)
  updated_at             DateTime @updatedAt @db.Timestamptz(3)

  address      Address?                @relation(name: "ProfileAddress")
  memberships  NeighborhoodMembership[]
  posts        Post[]
  likes        PostLike[]
  comments     PostComment[]
  media        Media[]                 // ✅ added media relation here

  @@map("profiles")
  @@schema("public")
}

// -------------------------------
// Addresses Table
// -------------------------------
model Address {
  id              BigInt  @id @default(autoincrement())
  user_id         String  @unique @db.Uuid
  neighborhood_id BigInt?
  address_line_1  String
  city            String
  postal_code     String

  user Profile @relation(name: "ProfileAddress", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("addresses")
  @@schema("public")
}

// -------------------------------
// Neighborhoods
// -------------------------------
model Neighborhood {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())

  memberships NeighborhoodMembership[]
  posts       Post[]

  @@map("neighborhoods")
  @@schema("public")
}

// -------------------------------
// Neighborhood Memberships
// -------------------------------
model NeighborhoodMembership {
  user_id         String     @db.Uuid
  neighborhood_id BigInt
  role            String     @default("member")
  joined_at       DateTime   @default(now())

  user         Profile      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  neighborhood Neighborhood @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)

  @@id([user_id, neighborhood_id])
  @@map("neighborhood_memberships")
  @@schema("public")
}

// -------------------------------
// Posts
// -------------------------------
model Post {
  id              BigInt         @id @default(autoincrement())
  author_id       String         @db.Uuid
  neighborhood_id BigInt
  content         String         @db.Text
  is_pinned       Boolean        @default(false)
  created_at      DateTime       @default(now()) @db.Timestamptz(3)

  author       Profile        @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  neighborhood Neighborhood   @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)
  likes        PostLike[]
  comments     PostComment[]

  @@index([neighborhood_id, created_at(sort: Desc)])
  @@map("posts")
  @@schema("public")
}

// -------------------------------
// Post Likes
// -------------------------------
model PostLike {
  user_id    String   @db.Uuid
  post_id    BigInt
  created_at DateTime @default(now())

  user Profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  post Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([user_id, post_id])
  @@map("post_likes")
  @@schema("public")
}

// -------------------------------
// Post Comments
// -------------------------------
model PostComment {
  id                BigInt       @id @default(autoincrement())
  post_id           BigInt
  author_id         String       @db.Uuid
  content           String       @db.Text
  parent_comment_id BigInt?

  post            Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  author          Profile       @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  parent_comment  PostComment?  @relation("Replies", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  replies         PostComment[] @relation("Replies")
  created_at      DateTime      @default(now())

  @@map("post_comments")
  @@schema("public")
}

// -------------------------------
// ✅ Media Table (added at end)
// -------------------------------
model Media {
  id            String   @id @default(uuid())
  uploader_id   String   @db.Uuid
  resource_type String   // e.g., 'post', 'profile_avatar'
  resource_id   BigInt   // The ID of the post or other resource
  url           String   @db.Text
  created_at    DateTime @default(now())

  // ✅ FIXED: Reference user_id, not id
  uploader Profile @relation(fields: [uploader_id], references: [user_id], onDelete: Cascade)

  @@index([resource_type, resource_id])
  @@map("media")
  @@schema("public")
}

