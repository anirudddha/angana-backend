generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["public"]
}

model Profile {
  id                     String                    @id @default(uuid()) @db.Uuid
  user_id                String                    @unique @db.Uuid
  role                   String                    @default("resident")
  full_name              String
  bio                    String?
  avatar_url             String?
  is_onboarding_complete Boolean                   @default(false)
  created_at             DateTime                  @default(now()) @db.Timestamptz(3)
  updated_at             DateTime                  @updatedAt @db.Timestamptz(3)
  address                Address?                  @relation("ProfileAddress")
  conversations          ConversationParticipant[]
  device_tokens          DeviceToken[]
  marketplace_listings   MarketplaceListing[]
  media                  Media[]
  sent_messages          Message[]
  memberships            NeighborhoodMembership[]
  comments               PostComment[]
  likes                  PostLike[]
  posts                  Post[]
  pets                   Pet[]

  created_groups         Group[]
  group_memberships      GroupMembership[]
  group_posts            GroupPost[]
  group_post_likes       GroupPostLike[]
  group_post_comments    GroupPostComment[]

  created_events         Event[]
  event_rsvps            EventRsvp[]

  business_profile       BusinessProfile?

  business_recommendations BusinessRecommendation[] @relation("ReviewerRecommendations")

  babysitter_profile     BabysitterProfile?
  given_babysitter_recommendations BabysitterRecommendation[] @relation("ReviewerRecommendations")

  @@map("profiles")
  @@schema("public")
}

model Address {
  id              BigInt                   @id @default(autoincrement())
  user_id         String                   @unique @db.Uuid
  neighborhood_id BigInt?
  address_line_1  String
  city            String
  postal_code     String
  location        Unsupported("geography")
  neighborhood    Neighborhood?            @relation(fields: [neighborhood_id], references: [id])
  user            Profile                  @relation("ProfileAddress", fields: [user_id], references: [user_id], onDelete: Cascade)

  business_profile_id BigInt?          @unique
  business_profile    BusinessProfile? @relation(fields: [business_profile_id], references: [id], onDelete: SetNull)

  @@index([location], map: "idx_addresses_location", type: Gist)
  @@map("addresses")
  @@schema("public")
}

model Neighborhood {
  id                   BigInt                   @id @default(autoincrement())
  name                 String
  description          String?
  created_at           DateTime                 @default(now())
  boundaries           Unsupported("geography")
  center_point         Unsupported("geography")
  addresses            Address[]
  marketplace_listings MarketplaceListing[]
  memberships          NeighborhoodMembership[]
  posts                Post[]
  deals                Deal[]

  events               Event[]
  groups               Group[]

  @@index([boundaries], map: "idx_neighborhoods_boundaries", type: Gist)
  @@map("neighborhoods")
  @@schema("public")
}

model NeighborhoodMembership {
  user_id         String       @db.Uuid
  neighborhood_id BigInt
  role            String       @default("member")
  joined_at       DateTime     @default(now())
  neighborhood    Neighborhood @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)
  user            Profile      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, neighborhood_id])
  @@map("neighborhood_memberships")
  @@schema("public")
}

model Post {
  id              BigInt                   @id @default(autoincrement())
  author_id       String                   @db.Uuid
  neighborhood_id BigInt
  content         String
  is_pinned       Boolean                  @default(false)
  created_at      DateTime                 @default(now()) @db.Timestamptz(3)
  content_tsv     Unsupported("tsvector")?
  comments        PostComment[]
  likes           PostLike[]
  author          Profile                  @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  neighborhood    Neighborhood             @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)
  media           Media[]

  @@index([neighborhood_id, created_at(sort: Desc)])
  @@index([content_tsv], map: "idx_posts_content_tsv", type: Gin)
  @@map("posts")
  @@schema("public")
}

model PostLike {
  user_id    String   @db.Uuid
  post_id    BigInt
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       Profile  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, post_id])
  @@map("post_likes")
  @@schema("public")
}

model PostComment {
  id                BigInt        @id @default(autoincrement())
  post_id           BigInt
  author_id         String        @db.Uuid
  content           String
  parent_comment_id BigInt?
  created_at        DateTime      @default(now())
  author            Profile       @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  parent_comment    PostComment?  @relation("Replies", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  replies           PostComment[] @relation("Replies")
  post              Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("post_comments")
  @@schema("public")
}

model Media {
  id          String @id @default(uuid())
  uploader_id String @db.Uuid

  url String

  post_id                BigInt?
  marketplace_listing_id BigInt?
  business_profile_id    BigInt?

  created_at DateTime @default(now())
  uploader   Profile  @relation(fields: [uploader_id], references: [user_id], onDelete: Cascade)

  post                Post?               @relation(fields: [post_id], references: [id], onDelete: Cascade)
  marketplace_listing MarketplaceListing? @relation(fields: [marketplace_listing_id], references: [id], onDelete: Cascade)

  deal_id BigInt?
  deal    Deal?   @relation(fields: [deal_id], references: [id], onDelete: Cascade)
  business_profile    BusinessProfile? @relation(fields: [business_profile_id], references: [id], onDelete: Cascade)

  event_id BigInt?
  event    Event?  @relation(fields: [event_id], references: [id], onDelete: Cascade)

  pet_id BigInt?
  pet    Pet?    @relation(fields: [pet_id], references: [id], onDelete: Cascade)

  group_id       BigInt?
  group_post_id  BigInt?

  group       Group?     @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_post  GroupPost? @relation(fields: [group_post_id], references: [id], onDelete: Cascade)

  @@map("media")
  @@schema("public")
}

model MarketplaceListing {
  id              BigInt                   @id @default(autoincrement())
  seller_id       String                   @db.Uuid
  neighborhood_id BigInt
  title           String
  description     String?
  price           Float
  category        String
  status          String                   @default("available")
  location        Unsupported("geography")
  created_at      DateTime                 @default(now())
  content_tsv     Unsupported("tsvector")?
  neighborhood    Neighborhood             @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)
  seller          Profile                  @relation(fields: [seller_id], references: [user_id], onDelete: Cascade)
  media           Media[]

  @@index([location], map: "idx_marketplace_listings_location", type: Gist)
  @@index([content_tsv], map: "idx_marketplace_listings_content_tsv", type: Gin)
  @@map("marketplace_listings")
  @@schema("public")
}

model Conversation {
  id           BigInt                    @id @default(autoincrement())
  created_at   DateTime                  @default(now())
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
  @@schema("public")
}

model ConversationParticipant {
  conversation_id BigInt
  user_id         String       @db.Uuid
  last_read_at    DateTime?
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            Profile      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([conversation_id, user_id])
  @@index([user_id])
  @@map("conversation_participants")
  @@schema("public")
}

model Message {
  id              BigInt       @id @default(autoincrement())
  conversation_id BigInt
  sender_id       String       @db.Uuid
  content         String
  sent_at         DateTime     @default(now())
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          Profile      @relation(fields: [sender_id], references: [id], onDelete: Cascade)

  @@map("messages")
  @@schema("public")
}

model DeviceToken {
  id          BigInt   @id @default(autoincrement())
  user_id     String   @db.Uuid
  token       String   @unique
  device_type String
  provider    String   @default("fcm")
  created_at  DateTime @default(now())
  user        Profile  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("device_tokens")
  @@schema("public")
}

model BusinessProfile {
  id            BigInt   @id @default(autoincrement())
  profile_id    String   @unique @db.Uuid // One-to-one link to the user's main profile
  business_name String
  category      String // e.g., 'Restaurant', 'Retail', 'Services'
  description   String?  @db.Text
  phone_number  String?
  website       String?
  status        String   @default("pending") // 'pending', 'verified', 'rejected'
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  // Relation back to the main profile
  profile Profile  @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  // A business can have many deals
  deals   Deal[]
  media Media[]
  // A business is located at a specific address
  address Address?

  service_offerings ServiceOffering[]
  recommendations   BusinessRecommendation[]

  @@map("business_profiles")
  @@schema("public")
}

// NEW MODEL: Deal
model Deal {
  id              BigInt    @id @default(autoincrement())
  business_id     BigInt // Foreign key to BusinessProfile
  neighborhood_id BigInt
  title           String
  description     String    @db.Text
  deal_type       String // 'discount', 'coupon', 'service'
  coupon_code     String?
  start_date      DateTime?
  end_date        DateTime?
  status          String    @default("active") // 'active', 'inactive', 'expired'
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  business     BusinessProfile @relation(fields: [business_id], references: [id], onDelete: Cascade)
  neighborhood Neighborhood    @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)
  media        Media[] // Deals can have images

  @@map("deals")
  @@schema("public")
}

model Event {
  id              BigInt      @id @default(autoincrement())
  creator_id      String      @db.Uuid
  neighborhood_id BigInt
  title           String
  description     String      @db.Text
  location_name   String      // e.g., "Central Park Pavilion"
  location_point  Unsupported("geography(Point, 4326)")? // For map view
  start_time      DateTime
  end_time        DateTime?
  organizer_type  String      @default("resident") // 'resident' or 'business'
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  creator      Profile      @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  neighborhood Neighborhood @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)
  media        Media[]      // Events can have a cover image or gallery
  rsvps        EventRsvp[]

  @@map("events")
  @@schema("public")
}

model EventRsvp {
  user_id    String   @db.Uuid
  event_id   BigInt
  created_at DateTime @default(now())

  user  Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)
  event Event   @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@id([user_id, event_id]) // Composite primary key prevents duplicate RSVPs
  @@map("event_rsvps")
  @@schema("public")
}

model ServiceCategory {
  id   Int    @id @default(autoincrement())
  name String @unique

  // A category can be offered by many businesses
  offerings ServiceOffering[]

  @@map("service_categories")
  @@schema("public")
}

model ServiceOffering {
  id                  Int      @id @default(autoincrement())
  business_profile_id BigInt
  service_category_id Int

  business_profile  BusinessProfile @relation(fields: [business_profile_id], references: [id], onDelete: Cascade)
  service_category ServiceCategory @relation(fields: [service_category_id], references: [id], onDelete: Cascade)

  @@unique([business_profile_id, service_category_id]) // A business can only offer a category once
  @@map("service_offerings")
  @@schema("public")
}

model BusinessRecommendation {
  id                  Int      @id @default(autoincrement())
  reviewer_id         String   @db.Uuid
  business_profile_id BigInt
  rating              Int
  comment             String   @db.Text
  created_at          DateTime @default(now())

  reviewer         Profile         @relation("ReviewerRecommendations", fields: [reviewer_id], references: [id], onDelete: Cascade)
  business_profile BusinessProfile @relation(fields: [business_profile_id], references: [id], onDelete: Cascade)

  @@unique([reviewer_id, business_profile_id])
  @@map("business_recommendations")
  @@schema("public")
}

model Pet {
  id         BigInt   @id @default(autoincrement())
  owner_id   String   @db.Uuid
  name       String
  species    String   // e.g., 'Dog', 'Cat', 'Rabbit'
  breed      String?
  bio        String?  @db.Text
  status     String   @default("safe") // 'safe', 'lost'
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  owner Profile @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  media Media[]

  @@map("pets")
  @@schema("public")
}

model BabysitterProfile {
  id               BigInt      @id @default(autoincrement())
  profile_id       String      @unique @db.Uuid // One-to-one link to the user's main profile
  bio              String      @db.Text
  experience_years Int?
  rate_per_hour    Float?
  certifications   String[]    // Array of strings, e.g., ["CPR Certified", "First Aid"]
  status           String      @default("active") // 'active', 'inactive'

  profile         Profile                  @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  recommendations BabysitterRecommendation[]

  @@map("babysitter_profiles")
  @@schema("public")
}

model BabysitterRecommendation {
  id                    BigInt            @id @default(autoincrement())
  reviewer_id           String            @db.Uuid
  babysitter_profile_id BigInt
  comment               String            @db.Text
  created_at            DateTime          @default(now())

  reviewer         Profile           @relation("ReviewerRecommendations", fields: [reviewer_id], references: [id], onDelete: Cascade)
  babysitter_profile BabysitterProfile @relation(fields: [babysitter_profile_id], references: [id], onDelete: Cascade)

  @@unique([reviewer_id, babysitter_profile_id]) // A user can only recommend a sitter once
  @@map("babysitter_recommendations")
  @@schema("public")
}

model Group {
  id              BigInt      @id @default(autoincrement())
  creator_id      String      @db.Uuid
  neighborhood_id BigInt
  name            String
  description     String      @db.Text
  privacy_level   String      @default("public") // 'public', 'private'
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  creator      Profile           @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  neighborhood Neighborhood      @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade)
  media        Media[]           // For cover image, etc.
  memberships  GroupMembership[]
  posts        GroupPost[]

  @@map("groups")
  @@schema("public")
}

// NEW MODEL: GroupMembership (Join Table)
model GroupMembership {
  user_id    String   @db.Uuid
  group_id   BigInt
  role       String   @default("member") // 'member', 'moderator', 'admin'
  status     String   @default("active") // 'active' for public, 'pending' for private join requests
  joined_at  DateTime @default(now())

  user  Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group Group   @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@id([user_id, group_id])
  @@map("group_memberships")
  @@schema("public")
}

// --- SEPARATE POSTING SYSTEM FOR GROUPS ---

// NEW MODEL: GroupPost
model GroupPost {
  id         BigInt            @id @default(autoincrement())
  author_id  String            @db.Uuid
  group_id   BigInt
  content    String            @db.Text
  is_pinned  Boolean           @default(false)
  created_at DateTime          @default(now())

  author   Profile           @relation(fields: [author_id], references: [id], onDelete: Cascade)
  group    Group             @relation(fields: [group_id], references: [id], onDelete: Cascade)
  media    Media[]
  likes    GroupPostLike[]
  comments GroupPostComment[]

  @@map("group_posts")
  @@schema("public")
}

// NEW MODEL: GroupPostLike
model GroupPostLike {
  user_id      String    @db.Uuid
  group_post_id BigInt
  created_at   DateTime  @default(now())

  user Profile   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post GroupPost @relation(fields: [group_post_id], references: [id], onDelete: Cascade)

  @@id([user_id, group_post_id])
  @@map("group_post_likes")
  @@schema("public")
}

// NEW MODEL: GroupPostComment
model GroupPostComment {
  id            BigInt    @id @default(autoincrement())
  group_post_id BigInt
  author_id     String    @db.Uuid
  content       String    @db.Text
  created_at    DateTime  @default(now())

  post   GroupPost @relation(fields: [group_post_id], references: [id], onDelete: Cascade)
  author Profile   @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@map("group_post_comments")
  @@schema("public")
}
